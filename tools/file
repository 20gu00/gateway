个人使用

create database gateway character set utf8mb4 COLLATE=utf8mb4_general_ci;

数据库连接是昂贵重要的资源,使用数据库连接池统一管理,设置最大最小连接数,每个连接访问次数,连接时间等,这个就是orm框架的连接池概念

缓存:提升系统的访问速度和增加处理容量,给相应的业务增加缓存

降级:服务区压力剧增,根据业务策略,对某些服务降级,在微服务中十分明显

限流:对并发限速,拒绝请求,请求排队降级等

websocket ws 101切换成websocket协议

websocket代理,通过代理去访问服务端,客户端和websocket代理建立长连接,websocket有recive和send两个口,从服务段拿到数据立即回传给客户端,用来实现实时通信,比如聊天室

https:服务器将自己的ca签发的证书发送给客户端,客户端校验证书是不是ca颁发的,从而确认客户端以为的发送证书的段就是服务端,用ca的工要解开加密证书的私钥,拿到服务器的公钥,加密信息传输给服务端,服务端用自己的私钥解密

http2传输的是二进制而不是文本,可以实现一个连接多路复用,报头压缩

swag1.6.5

X-Real-IP和X-Forwarded-For,前者可信,后者可以伪造,前者客户端即请求发起端的ip,后者是前一台机器的ip不断组成的切片

凭证式令牌,后端基于凭证认证,基于用户,clientid+secret,一个用户可以多个租户

client--发账号密码申请token-->网关jwt生成token--返回token-->client--将token放进请求头访问网关-->网关中间件教研token,权限校验-->返回数据给client

提高性能,我将数据库等信息一次性加载到内存中,如果有不合理的操作比如直接手动修改数据库,那么修改的数据需要重启服务才能获取

添加租户,secret可以自动生成

tcp代理 四层

七层代理 两次三次握手
四层代理 客户端和服务器直连 中间snat  代理数据直接进入程序的buffer中 (redis mysql)
tcp服务器 代理 -> 负载均衡
流量统计器限流器(流量限速)负载均衡器都是单例方式,一个服务一个,负载均衡包括检测服务是否就绪
http代理基于原生的http服务实现
tcp的权限认证和租户统计
测试/auth/token:
    postman: auth->base auth->username,passwd
             body->x-www-form-urlencoded->grant_type client_credentials和scope read_write
    appid->username secret->password

curl 'http://tenant_2:44e984cf2dd07f21145c1776d38dd406@127.0.0.1:8080/auth/token' -d 'grant_type=client_credentials&scope=read_write'
curl 'http://127.0.0.1:8080/auth/token' -u tenant_2:44e984cf2dd07f21145c1776d38dd406 -d 'grant_type=client_credentials&scope=read_write'

curl --location --request POST 'http://127.0.0.1:8080/auth/token' \
--header 'Authorization: Basic Og==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=client_credentials' \
--data-urlencode 'scope=read_write'

连接tcp服务 telnet 127.0.0.1 2002

nginx的upstream
数据源->源头->上游->下游->用户

tcp代理测试:
    telnet 127.0.0.1 8021

grpc:
    rpc基于http2,七层
    安装:github.com/grpc/grpc-go  go get -u google.golang.org/grpc
    protoc编译器和protoc-gen-go安装,官网(proto protoc-gen-go protoc-gen-go-grpc)
    go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
    go get github.com/golang/protobuf/proto

    IDL protoc --go_out=. --go_opt=paths=source_relative \
            --go-grpc_out=. --go-grpc_opt=paths=source_relative \
            helloworld/helloworld.proto
    protoc --go_out=. --go-grpc_out=. proto/test.proto

    实现支持http访问
    支持普通rpc和双向流式传递
    连接多路复用,header(metadata)传递
    加密tls可选
    data是proto buffer(数据传递都是)
    grpc-gateway让rpc变为http,传递json

    实现grpc透明代理难点:
        本身的grpc-gateway需要借助结构体转换
        使用tcp代理对grpc管控不够方便
        grcp的发送接收基于idl
        要实现非结构体转换和方法管控的代理

    grpc代理实现点:
    自定义编码codec和编码规则CustomCodec(支持原始字节和proto的解码器,原始字节不需要解码,不是原始字节就通过proto转换)(构建输出方法,设置到server参数中)(grpc-proxy实现了解码和未知回调)
    自定义位置方法回调UnknownServiceHandler
    基于自定义回调可以对请求实现方法级的管控
